.Start TuplePlayer

CS: .Integer #-1   ;Current State

Tape: .Character '_' ;Tape data.
        .Character '_'
    .Character '_'
    .Character '1'
    .Character '1'
    .Character '1'
    .Character '_'
    .Character '_'
    .Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'

endTape: .Character '_' ;End tape.

tupleStart: .Tuple -1 _ -1 _ r
.Tuple -1 1 -2 1 r
.Tuple -2 1 -2 1 r
.Tuple -2 _ -3 a l
.Tuple -3 1 -3 1 l
.Tuple -3 _ 0 _ r
.Tuple 0 _ 0 _ r
.Tuple 0 1 1 x r
.Tuple 0 a 0 a r
.Tuple 1 1 1 1 r
.Tuple 1 a 1 a r
.Tuple 1 _ 2 _ r
.Tuple 2 1 2 1 r
.Tuple 2 _ 3 1 l
.Tuple 3 1 3 1 l
.Tuple 3 _ 4 _ l
.Tuple 4 1 5 1 l
.Tuple 4 x 6 1 l
.Tuple 5 1 5 1 l
.Tuple 5 a 5 a l
.Tuple 5 x 0 x r
.Tuple 6 x 6 1 l
endTuple: .Tuple 6 a 6 _ l

space: .Character ' '


TuplePlayer: movar Tape r0
TupleReader: movar tupleStart r1
             jmp TupleTester
TupleDataR:  movar endTape r2
             cmprr r0 r2
             jmpp ErrorP
             cmpir #0 r0
             jmpp ErrorP
             jmp TupleReader

TupleTester: movxr r1 r2
             movmr CS r3
             cmprr r2 r3
             jmpz StateEquals
             addir #5 r1
             jmp BadTuple
StateEquals: addir #1 r1
             movxr r1 r2
             movxr r0 r3
             cmprr r2 r3
             jmpz TupleEquals
             addir #4 r1
             jmp BadTuple
TupleEquals: addir #1 r1
             movxr r1 r2
             movrm r2 CS
             addir #1 r1
             movxr r1 r3
             movrx r3 r0
             addir #1 r1
             movxr r1 r2
             cmpir #0 r2
             jmpz SubFro
             addir #1 r0
             jmp outFro
SubFro:      subir #1 r0
outFro:      jmp TupleDataR

BadTuple: movar endTuple r2
          addir #5 r2
          cmprr r1 r2
          jmpz printTape
          jmp TupleTester
          halt

printTape: movar Tape r1
           movar endTape r2
prnt:      movxr r1 r3
           outcr r3
           movmr space r3
           outci r3
           cmprr r1 r2
           jmpz End
           addir #1 r1
           jmp prnt
End:       outci #10
           halt

Error: .String "Head out of bounds."
ErrorP: outs Error
        brk
        jmp printTape
        halt
.end
