.Start TuplePlayer

CS: .Integer #-1   ;Current State

Tape: .Character '_' ;Tape data.
        .Character '_'
    .Character '_'
    .Character '1'
    .Character '1'
    .Character '1'
    .Character '_'
    .Character '_'
    .Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'
.Character '_'

endTape: .Character '_' ;End tape.

tupleStart: .Tuple -1 _ -1 _ r
.Tuple -1 1 -2 1 r
.Tuple -2 1 -2 1 r
.Tuple -2 _ -3 a l
.Tuple -3 1 -3 1 l
.Tuple -3 _ 0 _ r
.Tuple 0 _ 0 _ r
.Tuple 0 1 1 x r
.Tuple 0 a 0 a r
.Tuple 1 1 1 1 r
.Tuple 1 a 1 a r
.Tuple 1 _ 2 _ r
.Tuple 2 1 2 1 r
.Tuple 2 _ 3 1 l
.Tuple 3 1 3 1 l
.Tuple 3 _ 4 _ l
.Tuple 4 1 5 1 l
.Tuple 4 x 6 1 l
.Tuple 5 1 5 1 l
.Tuple 5 a 5 a l
.Tuple 5 x 0 x r
.Tuple 6 x 6 1 l
endTuple: .Tuple 6 a 6 _ l

space: .Character ' '

space:      .Character ' '
lbracket:   .Character '['
rbracket:   .Character ']'
TPdebug: .String "entered TuplePlayer"
TRdebug: .String "entered TupleReader"
TDRdebug: .String "entered TupleDataR"
TTdebug: .String "entered TupleTester"
SEdebug: .String "entered StateEquals"
TEdebug: .String "entered Tuple Equals"
BTdebug: .String "entered BadTuple"
PTdebug: .String "entered PrintTape"
PRdebug: .String "entered prnt"
BPdebug: .String "entered printBracket"

TuplePlayer: movar Tape r0
TupleReader: movar tupleStart r1
             jmp TupleTester
TupleDataR:  movar endTape r2
             cmprr r0 r2
             jmpp ErrorP
             cmpir #0 r0
             jmpp ErrorP
             jmp TupleReader

TupleReader:    outs Trdebug
                movar tupleStart r1 ; intitialize r1 tuple pointer by putting in start of first tuple
                jmp printTape

BadTuple: movar endTuple r2
          addir #5 r2
          cmprr r1 r2
          jmpz printTape
          jmp TupleTester
          halt

TupleTester:    outs TTdebug
                movxr r1 r2 ; move state from current tuple to r2
                movmr CS r3 ; move current state to r3
                cmprr r2 r3 ; compare states
                jmpz StateEquals ; match? -> StateEquals
                addir #5 r1 ; advance r1 tuple pointer to next tuple
                jmp BadTuple

Error: .String "Head out of bounds."
ErrorP: outs Error
        brk
        jmp printTape
        halt
.end
